//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToDo.ZadanieService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/ToDo.Areas.Zadania.Models")]
    [System.SerializableAttribute()]
    public partial class Task : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProgressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TopicField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Progress {
            get {
                return this.ProgressField;
            }
            set {
                if ((this.ProgressField.Equals(value) != true)) {
                    this.ProgressField = value;
                    this.RaisePropertyChanged("Progress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Topic {
            get {
                return this.TopicField;
            }
            set {
                if ((object.ReferenceEquals(this.TopicField, value) != true)) {
                    this.TopicField = value;
                    this.RaisePropertyChanged("Topic");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ZadanieService.IZadanieService")]
    public interface IZadanieService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/DoWork", ReplyAction="http://tempuri.org/IZadanieService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/DoWork", ReplyAction="http://tempuri.org/IZadanieService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/GetTasks", ReplyAction="http://tempuri.org/IZadanieService/GetTasksResponse")]
        ToDo.ZadanieService.Task[] GetTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/GetTasks", ReplyAction="http://tempuri.org/IZadanieService/GetTasksResponse")]
        System.Threading.Tasks.Task<ToDo.ZadanieService.Task[]> GetTasksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/Add", ReplyAction="http://tempuri.org/IZadanieService/AddResponse")]
        bool Add(ToDo.ZadanieService.Task newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/Add", ReplyAction="http://tempuri.org/IZadanieService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(ToDo.ZadanieService.Task newTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/Edit", ReplyAction="http://tempuri.org/IZadanieService/EditResponse")]
        bool Edit(ToDo.ZadanieService.Task editedTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/Edit", ReplyAction="http://tempuri.org/IZadanieService/EditResponse")]
        System.Threading.Tasks.Task<bool> EditAsync(ToDo.ZadanieService.Task editedTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/Remove", ReplyAction="http://tempuri.org/IZadanieService/RemoveResponse")]
        bool Remove(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/Remove", ReplyAction="http://tempuri.org/IZadanieService/RemoveResponse")]
        System.Threading.Tasks.Task<bool> RemoveAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/SwapNext", ReplyAction="http://tempuri.org/IZadanieService/SwapNextResponse")]
        bool SwapNext(ToDo.ZadanieService.Task swapMe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/SwapNext", ReplyAction="http://tempuri.org/IZadanieService/SwapNextResponse")]
        System.Threading.Tasks.Task<bool> SwapNextAsync(ToDo.ZadanieService.Task swapMe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/SwapPrevious", ReplyAction="http://tempuri.org/IZadanieService/SwapPreviousResponse")]
        bool SwapPrevious(ToDo.ZadanieService.Task swapMe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/SwapPrevious", ReplyAction="http://tempuri.org/IZadanieService/SwapPreviousResponse")]
        System.Threading.Tasks.Task<bool> SwapPreviousAsync(ToDo.ZadanieService.Task swapMe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/GetError", ReplyAction="http://tempuri.org/IZadanieService/GetErrorResponse")]
        string GetError();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IZadanieService/GetError", ReplyAction="http://tempuri.org/IZadanieService/GetErrorResponse")]
        System.Threading.Tasks.Task<string> GetErrorAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IZadanieServiceChannel : ToDo.ZadanieService.IZadanieService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ZadanieServiceClient : System.ServiceModel.ClientBase<ToDo.ZadanieService.IZadanieService>, ToDo.ZadanieService.IZadanieService {
        
        public ZadanieServiceClient() {
        }
        
        public ZadanieServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ZadanieServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ZadanieServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ZadanieServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public ToDo.ZadanieService.Task[] GetTasks() {
            return base.Channel.GetTasks();
        }
        
        public System.Threading.Tasks.Task<ToDo.ZadanieService.Task[]> GetTasksAsync() {
            return base.Channel.GetTasksAsync();
        }
        
        public bool Add(ToDo.ZadanieService.Task newTask) {
            return base.Channel.Add(newTask);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(ToDo.ZadanieService.Task newTask) {
            return base.Channel.AddAsync(newTask);
        }
        
        public bool Edit(ToDo.ZadanieService.Task editedTask) {
            return base.Channel.Edit(editedTask);
        }
        
        public System.Threading.Tasks.Task<bool> EditAsync(ToDo.ZadanieService.Task editedTask) {
            return base.Channel.EditAsync(editedTask);
        }
        
        public bool Remove(int id) {
            return base.Channel.Remove(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAsync(int id) {
            return base.Channel.RemoveAsync(id);
        }
        
        public bool SwapNext(ToDo.ZadanieService.Task swapMe) {
            return base.Channel.SwapNext(swapMe);
        }
        
        public System.Threading.Tasks.Task<bool> SwapNextAsync(ToDo.ZadanieService.Task swapMe) {
            return base.Channel.SwapNextAsync(swapMe);
        }
        
        public bool SwapPrevious(ToDo.ZadanieService.Task swapMe) {
            return base.Channel.SwapPrevious(swapMe);
        }
        
        public System.Threading.Tasks.Task<bool> SwapPreviousAsync(ToDo.ZadanieService.Task swapMe) {
            return base.Channel.SwapPreviousAsync(swapMe);
        }
        
        public string GetError() {
            return base.Channel.GetError();
        }
        
        public System.Threading.Tasks.Task<string> GetErrorAsync() {
            return base.Channel.GetErrorAsync();
        }
    }
}
