@model ToDo.Areas.Zadania.ViewModel.TasksViewConfigModel

@using ToDo.Areas.Zadania.Models

@{
    Task nameModel = null;
    Layout = "~/Views/Shared/_Layout.cshtml";

    var availableSite = Model.ViewConfig.MultiplierTaskPerSite != 0
        ? Math.Ceiling((decimal)(Model.ViewConfig.CountAllTasks) / Model.ViewConfig.TaskPerSite)
        : 1;

    var descriptionModel = Model.Tasks.FirstOrDefault(t => t.Id == Model.ViewConfig.DescriptionTaskId);
    var descriptionVisibleStyle = descriptionModel == null ? "none" : "inherit";

    var editedTask = Model.Tasks.FirstOrDefault(t => t.Id == Model.ViewConfig.EditedTaskId);
    var editedVisibleStyle = editedTask == null ? "none" : "inherit";

}

@{Html.RenderPartial("~/Areas/Zadania/Views/Shared/_PanelView.cshtml");}

@{ Html.RenderPartial("~/Areas/Zadania/Views/Shared/_SearchBar.cshtml", Model.ViewConfig.SearchBar); }

@if (Model.ViewConfig.ActualViewType == ToDo.Services.Zadania.ViewType.LIST)
{
    Html.RenderPartial("~/Areas/Zadania/Views/Shared/_List.cshtml", Model);
    
}
else
{
    Html.RenderPartial("~/Areas/Zadania/Views/Shared/_Tail.cshtml", Model);
    
}

<div class="row">
    <div class="text-right">
        <p>
            Elementów na stronie
            <select class="btn" id="viewPerSite" onchange="ChangeElementsPerSite()">
                @for (var iterator = 1; iterator <= Model.ViewConfig.MaxMultiplierPerSite; iterator++)
                {
                    int value = iterator * Convert.ToInt32(Model.ViewConfig.BasePerSite);
                    if (value == Model.ViewConfig.TaskPerSite)
                    {
                        <option value="@iterator" selected="selected">@value</option>
                    }
                    else
                    {
                        <option value="@iterator">@value</option>
                    }
                }

            </select>
        </p>
    </div>
</div>

<div class="row">
    <div class="text-center">
        @if (Model.ViewConfig.ActualSite == 1)
        {
            <input type="button" value="Poprzedni" class="btn btn-primary" disabled />
        }
        else
        {
            <input type="button" value="Poprzedni" class="btn btn-primary" onclick="PreviousSite()" />
        }
        <select class="btn" id="actualSite" onchange="ChangeActualSite()">
            @for (var iterator = 1; iterator <= availableSite; iterator++)
            {
                if (iterator == Model.ViewConfig.ActualSite)
                {
                    <option value="@iterator" selected="selected">@iterator</option>
                }
                else
                {
                    <option value="@iterator">@iterator</option>
                }
            }
        </select>

        @if (Model.ViewConfig.ActualSite >= availableSite)
        {
            <input type="button" value="Następny" class="btn btn-primary" disabled />
        }
        else
        {
            <input type="button" value="Następny" class="btn btn-primary" onclick="NextSite()" />
        }
    </div>
</div>

<div id="popup" style="display: none;">
    <div id="AddPopUp">
        @{ Html.RenderPartial("~/Areas/Zadania/Views/Shared/_CreateTask.cshtml", new Task()); }
    </div>
    <div id="EditPopUp" style="display: @editedVisibleStyle">
        @if (editedTask != null)
        {
            Html.RenderPartial("~/Areas/Zadania/Views/Shared/_CreateTask.cshtml", editedTask);
        }
    </div>
    <div id="DescriptionPopUp" style="display: @descriptionVisibleStyle">
        @if (descriptionModel != null)
        {
            Html.RenderPartial("~/Areas/Zadania/Views/Shared/_DescriptionView.cshtml", descriptionModel);
        }
    </div>
    <div id="ExportPopUp" class="export-container">
        @{Html.RenderPartial("/Areas/Zadania/Views/Shared/_ExportView.cshtml");}
    </div>
</div>

<div id="Error" style="display: none;"></div>
<div id="DeleteModal" style="display: none;">Czy na pewno chcesz usunąć to zadanie?</div>

<script type="text/javascript">
    const ChangeActualSiteHelper = function (id) {
        location.href = `@Url.Action("ChangeActualSite", "Zadanie")/${id}`;
    }
    const ChangeActualSite = function () {
        const int = parseInt($('#actualSite').val());
        if (int == NaN)
            console.warn('Coś poszło nie tak. Wartość była tekstem.')
        else
            ChangeActualSiteHelper(int);
    }
    const PreviousSite = function () {
        const int = parseInt($('#actualSite').val()) - 1;
        if (int == NaN)
            console.warn('Coś poszło nie tak. Wartość była tekstem.')
        else
            ChangeActualSiteHelper(int);
    }
    const NextSite = function () {
        const int = parseInt($('#actualSite').val()) + 1;
        if (int == NaN)
            console.warn('Coś poszło nie tak. Wartość była tekstem.')
        else
            ChangeActualSiteHelper(int);

    }

    const ChangeElementsPerSite = function () {
        const value = $('#viewPerSite').val();

        location.href = `@Url.Action("ChangeTasksPerSite", "Zadanie")/${value}`;
    }

    const Select = function () {
        var selected = 0;
        var EditButton = $('#EditButton');

        $('.EditCheckboxes').each(function () {
            if ($(this).prop('checked'))
                selected++;
        });


        if (selected == 1)
            EditButton.removeClass('disabled').addClass('icon');
        else
            EditButton.removeClass('icon').addClass('disabled');
    }

    const Delete = function (id) {
        $('#DeleteModal').dialog({
            autoOpen: true,
            title: 'Potwierdzenie',
            modal: true,
            hide: 'clip',
            show: 'shake',
            buttons: [
                {
                    text: "OK",
                    click: function () {
                        @{
                            <text>
                        location.href = `@Url.Action("Delete", "Zadanie")/${id}`;
                            </text>
                        }
                    }
                },
                {
                    text: "Anuluj",
                    click: function () {
                        $(this).dialog('close');
                    }
                }]
        });
    }

    @{
        <text>
    const LoadModalWindow = function () {
        Select();
        PopUp.OpenDialog('@Model.ViewConfig.VisibleModal');
    };

    if (window.addEventListener) {
        window.addEventListener('load', LoadModalWindow, false);
    }
    else if (window.attachEvent) {
        window.attachEvent('onload', LoadModalWindow);
    }

        </text>
    }
</script>

@if (Model.Exception != String.Empty && Model.Exception != null)
{
    Html.RenderPartial("~/Areas/Zadania/Views/Shared/_ExceptionHandle.cshtml", Model.Exception);
}

