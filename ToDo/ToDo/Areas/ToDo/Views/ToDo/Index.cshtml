@{
    ToDo.Areas.ToDo.Models.Tasks.Task modelForNames = null;

    ToDo.Areas.ToDo.Models.Tasks.Task editTask = ViewData["EditTask"] as ToDo.Areas.ToDo.Models.Tasks.Task;

    IEnumerable<ToDo.Areas.ToDo.Models.Tasks.Task> tasks = ViewData["Tasks"] as IEnumerable<ToDo.Areas.ToDo.Models.Tasks.Task>;
    ToDo.Areas.ToDo.Models.View.Config config = ViewData["ViewConfig"] as ToDo.Areas.ToDo.Models.View.Config;
    int AvailableSites = Convert.ToInt32(ViewData["AvailableSites"]);

    int maxTasks = Convert.ToInt32(ViewData["CountOfTasks"]);
    bool reverse = Convert.ToBoolean(ViewData["ReverseSort"]);

    int actualSort = Convert.ToInt32(ViewData["ActualSort"]);


    @helper OrderArrow(int main, int actual, bool reverse)
    {
        if (main == actual) {
            if (reverse) {
                <i class="fas fa-sort-down"></i>
            } else {
                <i class="fas fa-sort-up"></i>
            }
        }
    }
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{Html.RenderPartial("/Areas/ToDo/Views/Shared/_PanelView.cshtml");}
<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(dateStart => modelForNames.Action)
        </th>
        <th>
            @Html.DisplayNameFor(dateStart => modelForNames.Topic)
        </th>
        @using (Html.BeginForm("Sort", "ToDo", FormMethod.Post)) {
            <th>
                <button type="submit" name="sortType" value="DateStart" class="btn-link">@Html.DisplayNameFor(dateStart => modelForNames.Start)</button>
                @OrderArrow(actualSort, 1, reverse)
            </th>
            <th>
                <button type="submit" name="sortType" value="DateEnd" class="btn-link">@Html.DisplayNameFor(dateStart => modelForNames.End)</button>
                @OrderArrow(actualSort, 2, reverse)
            </th>
            <th>
                <button type="submit" name="sortType" value="State" class="btn-link">@Html.DisplayNameFor(dateStart => modelForNames.ActualStatus)</button>
                @OrderArrow(actualSort, 3, reverse)
            </th>
            <th>
                <button type="submit" name="sortType" value="Priority" class="btn-link">@Html.DisplayNameFor(dateStart => modelForNames.ActualPriority)</button>
                @OrderArrow(actualSort, 4, reverse)
            </th>
        }
        <th>
            @Html.DisplayNameFor(dateStart => modelForNames.Progress)
        </th>
        <th></th>
    </tr>
    @{int iter = config.ActualPerSite * (config.ActualSite - 1);}
    @foreach (var task in tasks) {
        <tr>
            <td>
                @Html.DisplayFor(m => task.Action)
            </td>
            <td>
                @Html.DisplayFor(m => task.Topic)
            </td>
            <td>
                @Html.DisplayFor(m => task.Start)
            </td>
            <td>
                @Html.DisplayFor(m => task.End)
            </td>
            <td>
                @Html.DisplayFor(m => task.ActualStatus)
            </td>
            <td>
                @Html.DisplayFor(m => task.ActualPriority)
            </td>
            <td>
                @Html.DisplayFor(m => task.Progress)
            </td>
            <td>
                <input type="checkbox" id="selected_@iter" onclick="Select(this)">
                <i class="fab fa-wpforms text-primary small-icon" onclick="OpenModalWindow('Description')"></i>
                @if (iter == 0) {
                    <i class="fas fa-angle-up text-primary small-icon-disabled" onclick=""></i>
                } else {
                    <i class="fas fa-angle-up text-primary small-icon" onclick="PreviousInList('@Url.Action("PreviousInList")', @iter)"></i>
                }
                @if (iter == maxTasks - 1) {
                    <i class="fas fa-angle-down text-primary small-icon-disabled" onclick="', @iter)"></i>
                } else {
                    <i class="fas fa-angle-down text-primary small-icon" onclick="NextInList('@Url.Action("NextInList")', @iter)"></i>
                }
                <i class="fas fa-plus fa-rotate-45 text-danger small-icon" onclick="Delete('@Url.Action("Delete")', @iter)"></i>
            </td>
        </tr>
        iter++;
    }

</table>
<div class="row">
    <div class="text-right">
        <p>
            Elementów na stronie
            <select class="btn" id="viewPerSite" onchange="ChangeElementsPerSite('@Url.Action("ElementsPerSite")')">
                @for (var iterator = 1; iterator <= 5; iterator++) {
                    int value = iterator * Convert.ToInt32(config.BaseElementPerSite);
                    if (value == config.ActualPerSite) {
                        <option value="@value" selected="selected">@value</option>
                    } else {
                        <option value="@value">@value</option>
                    }
                }

            </select>
        </p>
    </div>
</div>

<div class="row">
    <div class="text-center">
        @if (config.ActualSite == 1) {
            <input type="button" value="Poprzedni" class="btn btn-primary" disabled />
        } else {
            <input type="button" value="Poprzedni" class="btn btn-primary" onclick="PreviousSite('@Url.Action("ActualSite")')" />
        }
        <select class="btn" id="actualSite" onchange="ChangeActualSite('@Url.Action("ActualSite")')">
            @for (var iterator = 1; iterator <= AvailableSites + 1; iterator++) {
                if (iterator == config.ActualSite) {
                    <option value="@iterator" selected="selected">@iterator</option>
                } else {
                    <option value="@iterator">@iterator</option>
                }
            }
        </select>

        @if (config.ActualSite == AvailableSites + 1) {
            <input type="button" value="Następny" class="btn btn-primary" disabled />
        } else {
            <input type="button" value="Następny" class="btn btn-primary" onclick="NextSite('@Url.Action("ActualSite")')" />
        }
    </div>
</div>

<div id="modal" style="display: none">
    <div class="row Add-modal">
        @{Html.RenderPartial("/Areas/ToDo/Views/Shared/_FormView.cshtml");}
    </div>
    <div class="row Edit-modal">
        @{Html.RenderPartial("/Areas/ToDo/Views/Shared/_FormView.cshtml", editTask);}
    </div>
    <div class="row Description-modal">
        @{Html.RenderPartial("/Areas/ToDo/Views/Shared/_DescriptionView.cshtml");}
    </div>
    <div class="row List-modal">
        @{Html.RenderPartial("/Areas/ToDo/Views/Shared/_ListingView.cshtml");}
    </div>
    <div class="row Tile-modal">
        @{Html.RenderPartial("/Areas/ToDo/Views/Shared/_ListingView.cshtml");}
    </div>
    <div class="row Export-modal">
        @{Html.RenderPartial("/Areas/ToDo/Views/Shared/_ExportView.cshtml");}
    </div>
</div>
